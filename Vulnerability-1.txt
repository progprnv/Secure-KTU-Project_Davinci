


**Vulnerability Title:** CORS Misconfiguration on `https://REDACTED/resetPassword.htm`

**Domain Affected:** `REDACTED.in`

**Vulnerability Severity:** High
---

### Vulnerability Description:

The page at `https://REDACTED/anon/resetPassword.htm` exhibits a potential Cross-Origin Resource Sharing (CORS) misconfiguration that allows the `Access-Control-Allow-Origin` header to accept requests from the same domain `https://app.ktu.edu.in`. Additionally, the `Access-Control-Allow-Credentials` header is set to `true`, which could potentially lead to exploitation if combined with other issues such as improper validation or untrusted third-party origin handling.

---

### Vulnerability Details:

**Endpoint:**
- URL: `https://REDACTED/resetPassword.htm`

**Headers observed:**
- `Access-Control-Allow-Origin: https://REDACTED.in`
- `Access-Control-Allow-Credentials: true`

**Issue:**
While the CORS policy appears restricted to the same domain, the combination of `Access-Control-Allow-Credentials: true` with any potential subdomain misconfigurations or future relaxed CORS policies can allow attackers to bypass security controls, particularly when dealing with sensitive information such as password resets.

An attacker could create a malicious page that makes authenticated requests on behalf of a victim if they manage to manipulate or exploit this CORS policy under certain conditions, resulting in Cross-Site Request Forgery (CSRF)-like attacks but using CORS as a channel.

---

### Exploit Scenario:

1. **Step 1:** Attacker sets up a malicious website that the user visits.
2. **Step 2:** The attackerâ€™s website sends a `fetch` request to the vulnerable KTU page with the `Access-Control-Allow-Credentials` header, making an authenticated request on behalf of the victim.
3. **Step 3:** If the page at `https://REDACTED/resetPassword.htm` doesn't properly validate or sanitize requests, the attacker could potentially retrieve sensitive data or trigger unintended actions.

---

### Remediation Recommendations:

1. **Strict Origin Validation:** 
   - Ensure that the `Access-Control-Allow-Origin` header is properly restricted to trusted origins only, and not just `https://app.ktu.edu.in`.
   - Avoid using wildcard `*` or dynamically setting the `Access-Control-Allow-Origin` header based on untrusted sources.

2. **Remove `Access-Control-Allow-Credentials` Header:** 
   - If credentials (cookies, authorization headers) are not strictly necessary for CORS requests, remove the `Access-Control-Allow-Credentials: true` header.
   - Only allow credentials in CORS requests from trusted and verified origins.

3. **Sanitization and Input Validation:**
   - Implement strict validation and sanitization mechanisms on all incoming requests, especially those interacting with sensitive functionalities like password reset.

4. **Review Subdomains and Cross-Site Interactions:**
   - Conduct a security audit on all subdomains of `ktu.edu.in` to ensure none of them can exploit this misconfiguration. A weak subdomain policy can turn this vulnerability into a more severe one.

---

### Additional Information:

**References:**
- [Mozilla Developer Network: CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
- [OWASP: CORS Misconfigurations](https://owasp.org/www-community/attacks/CORS_OriginHeaderScrutiny)

--- 
